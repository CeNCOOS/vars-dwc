def get_db_conn(drvr_class, url, un, pw, loc):
    """
    Connects to VARS database (MS SQL server) and returns connection.

    Usage:
        c = get_db_conn(drvr_class, url, un, pw, location)

    Dependencies:
        Requires JayDeBeApi package (https://pypi.org/project/JayDeBeApi/)

    Inputs:
        drvr_class = class of the JDBC driver required to connect to SQL server ('com.microsoft.sqlserver.jdbc.SQLServerDriver')
        url = the database url (e.g. 'sqlserver://server.url.org:port;databaseName=observations')
        un = The user name to connect to the database
        pw = The password for the user
        loc = JDBC driver filename (.jar file - recommend saving it in same folder as VARS.py)

    Outputs:
        c = a SQL connection to the database. Remember to call c.close() when you're done pulling data.

    NOTES:
        1. In order to connect to this database, you will need a JDBC driver file. It can likely be found here
        (https://docs.microsoft.com/en-us/sql/connect/jdbc/using-the-jdbc-driver?view=sql-server-ver15).
        2. JayDeBeApi requires and imports JPype. JPype version 0.7.0 currently has a bug that will cause
        get_db_conn() to throw an error. Reverting to the earlier version (0.6.3) will fix this bug.
        Try: pip install --user JPype1==0.6.3 --force-reinstall
        3. If you are not at MBARI, you must VPN into MBARI to open a connection and retrieve data.

    Diana LaScala-Gruenewald
    2020-04-06
    Python 3.7

    """

    # Imports
    import jaydebeapi

    # Assemble properties dict
    properties = {'user': un, 'password': pw}

    # Create connection
    c = jaydebeapi.connect(drvr_class, url, properties, loc)

    return c


def get_data(c, sql_str):
    """ Takes a connection to the VARS database and a SQL string and retrieves data as a pandas dataframe.

    Usage:
        df = get_data(c, sql_str)

    Dependencies:
        Requires pandas package (https://pandas.pydata.org/)

    Inputs:
        c = database connection generated by get_db_conn()
        sql_str = a SQL string to retrieve data from MS SQL server database. For example, to view all tables
            in the ANNOTATIONS database:
                sql_str = \"""
                    SELECT TABLE_NAME
                    FROM ANNOTATIONS.INFORMATION_SCHEMA.TABLES
                    \"""

    Outputs:
        df = pandas dataframe containing requested records as rows and requested fields as columns

    NOTES:
        1. This function can take some time to run, depending on how much data you are requesting.
        2. If you are not at MBARI, you must VPN into MBARI to open a connection and retrieve data.

    """

    # Imports
    import pandas as pd

    # Set cursor
    cur = c.cursor()

    # Execute sql command
    cur.execute(sql_str)

    # Get column names
    col_names = [name[0] for name in cur.description]

    # Save the output to a pandas df
    df = pd.DataFrame(cur.fetchall())

    return df, col_names


if __name__ == '__main__':
    pass

